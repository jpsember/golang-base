package webserv

import (
	. "github.com/jpsember/golang-base/base"
	. "github.com/jpsember/golang-base/json"
)

type GridCell struct {
	Location IPoint
	Width    int
}

func (g *GridCell) String() string {
	m := NewJSMap()
	m.Put("", "GridCell")
	m.Put("Location", g.Location.String())
	m.Put("Width", g.Width)
	return m.AsString()
}

// A concrete Widget that can contain others
type ContainerWidgetObj struct {
	BaseWidgetObj
	children *Array[Widget]
	cells    *Array[GridCell]
	columns  int
}

type ContainerWidget = *ContainerWidgetObj

func NewContainerWidget(id string, m WidgetManager) ContainerWidget {
	w := ContainerWidgetObj{
		children: NewArray[Widget](),
		cells:    NewArray[GridCell](),
		columns:  m.pendingColumns,
	}
	w.Id = id
	return &w
}

func (w ContainerWidget) GetChildren() []Widget {
	return w.children.Array()
}

func (m ContainerWidget) AddChild(c Widget, manager WidgetManager) {
	m.children.Add(c)
	pr := PrIf(false)
	pr("adding widget to container:", INDENT, m)
	cell := GridCell{
		Width: manager.pendingColumns,
	}
	if m.cells.NonEmpty() {
		c := m.cells.Last()
		cell.Location = IPointWith(c.Location.X+c.Width, c.Location.Y)
	}
	if cell.Location.X+cell.Width > MaxColumns {
		cell.Location = IPointWith(0, cell.Location.Y+1)
		Todo("add support for cell heights > 1")
	}
	m.cells.Add(cell)
}

func (w ContainerWidget) RenderTo(m MarkupBuilder, state JSMap) {
	desc := `ContainerWidget ` + w.IdSummary()
	m.OpenHtml(`p`, desc).A(desc).CloseHtml(`p`, ``)

	prevPoint := IPointWith(0, -1)
	for index, child := range w.children.Array() {
		cell := w.cells.Get(index)
		// If this cell lies in a row below the current, Close the current and start a new one
		if cell.Location.Y > prevPoint.Y {
			if prevPoint.Y >= 0 {
				m.CloseHtml("div", "end of row")
			}
			m.Br()
			m.OpenHtml(`div class="row"`, `start of row`)
			m.Cr()
			prevPoint = IPointWith(0, cell.Location.Y)
		}

		// If cell lies to right of current, add space
		spaceColumns := cell.Location.X - prevPoint.X
		if spaceColumns > 0 {
			m.OpenHtml(`div class="col-sm-`+IntToString(spaceColumns)+`"`, `spacer`)
			child.RenderTo(m, state)
			m.CloseHtml(`div`, `spacer`)
		}

		m.OpenHtml(`div class="col-sm-`+IntToString(cell.Width)+`"`, `child`)
		child.RenderTo(m, state)
		m.CloseHtml(`div`, `child`)
		prevPoint = IPointWith(cell.Location.X+cell.Width, cell.Location.Y)
	}
	if prevPoint.Y >= 0 {
		m.CloseHtml("div", "row")
		m.Br()
	}
}

func (w ContainerWidget) LayoutChildren(manager WidgetManager) {
	// We no longer need to do anything here, as the cells generated by AddChild() do most of the work
	pr := PrIf(false)
	pr("LayoutChildren:", INDENT, w)
}
